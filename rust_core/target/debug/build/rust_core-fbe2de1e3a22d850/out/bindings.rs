/* automatically generated by rust-bindgen 0.71.1 */

pub const CAPTURE_DEVICE_FLAG_UP: u32 = 1;
pub const CAPTURE_DEVICE_FLAG_RUNNING: u32 = 2;
pub const CAPTURE_DEVICE_FLAG_PROMISC: u32 = 4;
pub const CAPTURE_DEVICE_FLAG_LOOPBACK: u32 = 8;
pub const CAPTURE_DEVICE_FLAG_WIRELESS: u32 = 16;
pub const CAPTURE_DEVICE_FLAG_VIRTUAL: u32 = 32;
pub const CAPTURE_DEVICE_FLAG_HAS_IPV4: u32 = 64;
pub const CAPTURE_DEVICE_FLAG_HAS_IPV6: u32 = 128;
pub type __time_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[doc = " 数据包结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct packet_t {
    pub data: *const u8,
    pub len: u32,
    pub caplen: u32,
    pub ts: timespec,
    pub if_index: u32,
    pub flags: u32,
    pub protocol: u32,
    pub vlan_tci: u32,
    pub hash: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of packet_t"][::std::mem::size_of::<packet_t>() - 56usize];
    ["Alignment of packet_t"][::std::mem::align_of::<packet_t>() - 8usize];
    ["Offset of field: packet_t::data"][::std::mem::offset_of!(packet_t, data) - 0usize];
    ["Offset of field: packet_t::len"][::std::mem::offset_of!(packet_t, len) - 8usize];
    ["Offset of field: packet_t::caplen"][::std::mem::offset_of!(packet_t, caplen) - 12usize];
    ["Offset of field: packet_t::ts"][::std::mem::offset_of!(packet_t, ts) - 16usize];
    ["Offset of field: packet_t::if_index"][::std::mem::offset_of!(packet_t, if_index) - 32usize];
    ["Offset of field: packet_t::flags"][::std::mem::offset_of!(packet_t, flags) - 36usize];
    ["Offset of field: packet_t::protocol"][::std::mem::offset_of!(packet_t, protocol) - 40usize];
    ["Offset of field: packet_t::vlan_tci"][::std::mem::offset_of!(packet_t, vlan_tci) - 44usize];
    ["Offset of field: packet_t::hash"][::std::mem::offset_of!(packet_t, hash) - 48usize];
};
#[doc = " 设备信息结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_device_t {
    pub name: [::std::os::raw::c_char; 32usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub flags: u32,
    pub type_: u32,
    pub mtu: u32,
    pub speed: u32,
    pub mac: [u8; 6usize],
    pub ipv4: u32,
    pub netmask: u32,
    pub broadcast: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of capture_device_t"][::std::mem::size_of::<capture_device_t>() - 324usize];
    ["Alignment of capture_device_t"][::std::mem::align_of::<capture_device_t>() - 4usize];
    ["Offset of field: capture_device_t::name"]
        [::std::mem::offset_of!(capture_device_t, name) - 0usize];
    ["Offset of field: capture_device_t::description"]
        [::std::mem::offset_of!(capture_device_t, description) - 32usize];
    ["Offset of field: capture_device_t::flags"]
        [::std::mem::offset_of!(capture_device_t, flags) - 288usize];
    ["Offset of field: capture_device_t::type_"]
        [::std::mem::offset_of!(capture_device_t, type_) - 292usize];
    ["Offset of field: capture_device_t::mtu"]
        [::std::mem::offset_of!(capture_device_t, mtu) - 296usize];
    ["Offset of field: capture_device_t::speed"]
        [::std::mem::offset_of!(capture_device_t, speed) - 300usize];
    ["Offset of field: capture_device_t::mac"]
        [::std::mem::offset_of!(capture_device_t, mac) - 304usize];
    ["Offset of field: capture_device_t::ipv4"]
        [::std::mem::offset_of!(capture_device_t, ipv4) - 312usize];
    ["Offset of field: capture_device_t::netmask"]
        [::std::mem::offset_of!(capture_device_t, netmask) - 316usize];
    ["Offset of field: capture_device_t::broadcast"]
        [::std::mem::offset_of!(capture_device_t, broadcast) - 320usize];
};
#[doc = " 统计信息结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_stats_t {
    pub packets_received: u64,
    pub packets_dropped: u64,
    pub packets_if_dropped: u64,
    pub bytes_received: u64,
    pub start_time: timespec,
    pub end_time: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of capture_stats_t"][::std::mem::size_of::<capture_stats_t>() - 64usize];
    ["Alignment of capture_stats_t"][::std::mem::align_of::<capture_stats_t>() - 8usize];
    ["Offset of field: capture_stats_t::packets_received"]
        [::std::mem::offset_of!(capture_stats_t, packets_received) - 0usize];
    ["Offset of field: capture_stats_t::packets_dropped"]
        [::std::mem::offset_of!(capture_stats_t, packets_dropped) - 8usize];
    ["Offset of field: capture_stats_t::packets_if_dropped"]
        [::std::mem::offset_of!(capture_stats_t, packets_if_dropped) - 16usize];
    ["Offset of field: capture_stats_t::bytes_received"]
        [::std::mem::offset_of!(capture_stats_t, bytes_received) - 24usize];
    ["Offset of field: capture_stats_t::start_time"]
        [::std::mem::offset_of!(capture_stats_t, start_time) - 32usize];
    ["Offset of field: capture_stats_t::end_time"]
        [::std::mem::offset_of!(capture_stats_t, end_time) - 48usize];
};
pub const capture_error_t_CAPTURE_SUCCESS: capture_error_t = 0;
pub const capture_error_t_CAPTURE_ERROR_INVALID_PARAM: capture_error_t = 1;
pub const capture_error_t_CAPTURE_ERROR_INIT_FAILED: capture_error_t = 2;
pub const capture_error_t_CAPTURE_ERROR_OPEN_FAILED: capture_error_t = 3;
pub const capture_error_t_CAPTURE_ERROR_SET_FILTER: capture_error_t = 4;
pub const capture_error_t_CAPTURE_ERROR_START_FAILED: capture_error_t = 5;
pub const capture_error_t_CAPTURE_ERROR_STOP_FAILED: capture_error_t = 6;
pub const capture_error_t_CAPTURE_ERROR_PAUSE_FAILED: capture_error_t = 7;
pub const capture_error_t_CAPTURE_ERROR_RESUME_FAILED: capture_error_t = 8;
pub const capture_error_t_CAPTURE_ERROR_GET_STATS: capture_error_t = 9;
pub const capture_error_t_CAPTURE_ERROR_GET_DEVICES: capture_error_t = 10;
pub const capture_error_t_CAPTURE_ERROR_NOT_SUPPORTED: capture_error_t = 11;
pub const capture_error_t_CAPTURE_ERROR_BACKEND: capture_error_t = 12;
pub const capture_error_t_CAPTURE_ERROR_MEMORY: capture_error_t = 13;
pub const capture_error_t_CAPTURE_ERROR_TIMEOUT: capture_error_t = 14;
pub const capture_error_t_CAPTURE_ERROR_INTERNAL: capture_error_t = 15;
#[doc = " 错误码定义"]
pub type capture_error_t = ::std::os::raw::c_uint;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_ETHERNET: capture_device_type_t = 1;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_WIFI: capture_device_type_t = 2;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_LOOPBACK: capture_device_type_t = 3;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_TUN: capture_device_type_t = 4;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_TAP: capture_device_type_t = 5;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_BRIDGE: capture_device_type_t = 6;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_VLAN: capture_device_type_t = 7;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_BOND: capture_device_type_t = 8;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_VETH: capture_device_type_t = 9;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_OTHER: capture_device_type_t = 10;
#[doc = " 设备类型定义"]
pub type capture_device_type_t = ::std::os::raw::c_uint;
pub const capture_backend_type_t_CAPTURE_BACKEND_PCAP: capture_backend_type_t = 0;
pub const capture_backend_type_t_CAPTURE_BACKEND_PFRING: capture_backend_type_t = 1;
pub const capture_backend_type_t_CAPTURE_BACKEND_DPDK: capture_backend_type_t = 2;
pub const capture_backend_type_t_CAPTURE_BACKEND_EBPF: capture_backend_type_t = 3;
#[doc = " 抓包后端类型"]
pub type capture_backend_type_t = ::std::os::raw::c_uint;
#[doc = " 抓包配置结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_config_t {
    pub device: *const ::std::os::raw::c_char,
    pub filter: *const ::std::os::raw::c_char,
    pub snaplen: ::std::os::raw::c_int,
    pub timeout_ms: ::std::os::raw::c_int,
    pub promiscuous: bool,
    pub immediate: bool,
    pub buffer_size: u32,
    pub type_: capture_backend_type_t,
    pub backend_config: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of capture_config_t"][::std::mem::size_of::<capture_config_t>() - 48usize];
    ["Alignment of capture_config_t"][::std::mem::align_of::<capture_config_t>() - 8usize];
    ["Offset of field: capture_config_t::device"]
        [::std::mem::offset_of!(capture_config_t, device) - 0usize];
    ["Offset of field: capture_config_t::filter"]
        [::std::mem::offset_of!(capture_config_t, filter) - 8usize];
    ["Offset of field: capture_config_t::snaplen"]
        [::std::mem::offset_of!(capture_config_t, snaplen) - 16usize];
    ["Offset of field: capture_config_t::timeout_ms"]
        [::std::mem::offset_of!(capture_config_t, timeout_ms) - 20usize];
    ["Offset of field: capture_config_t::promiscuous"]
        [::std::mem::offset_of!(capture_config_t, promiscuous) - 24usize];
    ["Offset of field: capture_config_t::immediate"]
        [::std::mem::offset_of!(capture_config_t, immediate) - 25usize];
    ["Offset of field: capture_config_t::buffer_size"]
        [::std::mem::offset_of!(capture_config_t, buffer_size) - 28usize];
    ["Offset of field: capture_config_t::type_"]
        [::std::mem::offset_of!(capture_config_t, type_) - 32usize];
    ["Offset of field: capture_config_t::backend_config"]
        [::std::mem::offset_of!(capture_config_t, backend_config) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_handle {
    _unused: [u8; 0],
}
#[doc = " 抓包句柄"]
pub type capture_handle_t = capture_handle;
#[doc = " 数据包回调函数类型\n @param packet 数据包\n @param user_data 用户数据\n @return 返回 true 继续抓包，false 停止抓包"]
pub type packet_callback_t = ::std::option::Option<
    unsafe extern "C" fn(packet: *const packet_t, user_data: *mut ::std::os::raw::c_void) -> bool,
>;
#[doc = " 错误回调函数类型\n @param error 错误信息\n @param user_data 用户数据"]
pub type error_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        error: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    #[doc = " 初始化抓包系统\n @param config 配置信息\n @param error_cb 错误回调函数\n @param error_user_data 错误回调用户数据\n @return 成功返回抓包句柄，失败返回 NULL"]
    pub fn capture_init(
        config: *const capture_config_t,
        error_cb: error_callback_t,
        error_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut capture_handle_t;
}
unsafe extern "C" {
    #[doc = " 开始抓包\n @param handle 抓包句柄\n @param packet_cb 数据包回调函数\n @param user_data 用户数据\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_start(
        handle: *mut capture_handle_t,
        packet_cb: packet_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 停止抓包\n @param handle 抓包句柄\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_stop(handle: *mut capture_handle_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 暂停抓包\n @param handle 抓包句柄\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_pause(handle: *mut capture_handle_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 恢复抓包\n @param handle 抓包句柄\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_resume(handle: *mut capture_handle_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 获取统计信息\n @param handle 抓包句柄\n @param stats 统计信息结构\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_get_stats(
        handle: *mut capture_handle_t,
        stats: *mut capture_stats_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 设置过滤器\n @param handle 抓包句柄\n @param filter BPF 过滤器\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_set_filter(
        handle: *mut capture_handle_t,
        filter: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 获取支持的设备列表\n @param devices 设备列表\n @param count 设备数量\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_get_devices(
        devices: *mut *mut capture_device_t,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 释放设备列表\n @param devices 设备列表\n @param count 设备数量"]
    pub fn capture_free_devices(devices: *mut capture_device_t, count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[doc = " 清理抓包句柄\n @param handle 抓包句柄"]
    pub fn capture_cleanup(handle: *mut capture_handle_t);
}
#[doc = " 后端操作函数表"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_backend_ops_t {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            config: *const capture_config_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void)>,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            device: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            callback: packet_callback_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub pause: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub resume: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub set_filter: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            filter: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_stats: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            stats: *mut capture_stats_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_devices: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            devices: *mut *mut capture_device_t,
            count: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub free_devices: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            devices: *mut capture_device_t,
            count: ::std::os::raw::c_int,
        ),
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
    >,
    pub get_version: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
    >,
    pub get_description: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
    >,
    pub is_feature_supported: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            feature: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub set_option: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            option: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_option: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            option: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of capture_backend_ops_t"][::std::mem::size_of::<capture_backend_ops_t>() - 144usize];
    ["Alignment of capture_backend_ops_t"]
        [::std::mem::align_of::<capture_backend_ops_t>() - 8usize];
    ["Offset of field: capture_backend_ops_t::init"]
        [::std::mem::offset_of!(capture_backend_ops_t, init) - 0usize];
    ["Offset of field: capture_backend_ops_t::cleanup"]
        [::std::mem::offset_of!(capture_backend_ops_t, cleanup) - 8usize];
    ["Offset of field: capture_backend_ops_t::open"]
        [::std::mem::offset_of!(capture_backend_ops_t, open) - 16usize];
    ["Offset of field: capture_backend_ops_t::close"]
        [::std::mem::offset_of!(capture_backend_ops_t, close) - 24usize];
    ["Offset of field: capture_backend_ops_t::start"]
        [::std::mem::offset_of!(capture_backend_ops_t, start) - 32usize];
    ["Offset of field: capture_backend_ops_t::stop"]
        [::std::mem::offset_of!(capture_backend_ops_t, stop) - 40usize];
    ["Offset of field: capture_backend_ops_t::pause"]
        [::std::mem::offset_of!(capture_backend_ops_t, pause) - 48usize];
    ["Offset of field: capture_backend_ops_t::resume"]
        [::std::mem::offset_of!(capture_backend_ops_t, resume) - 56usize];
    ["Offset of field: capture_backend_ops_t::set_filter"]
        [::std::mem::offset_of!(capture_backend_ops_t, set_filter) - 64usize];
    ["Offset of field: capture_backend_ops_t::get_stats"]
        [::std::mem::offset_of!(capture_backend_ops_t, get_stats) - 72usize];
    ["Offset of field: capture_backend_ops_t::get_devices"]
        [::std::mem::offset_of!(capture_backend_ops_t, get_devices) - 80usize];
    ["Offset of field: capture_backend_ops_t::free_devices"]
        [::std::mem::offset_of!(capture_backend_ops_t, free_devices) - 88usize];
    ["Offset of field: capture_backend_ops_t::get_name"]
        [::std::mem::offset_of!(capture_backend_ops_t, get_name) - 96usize];
    ["Offset of field: capture_backend_ops_t::get_version"]
        [::std::mem::offset_of!(capture_backend_ops_t, get_version) - 104usize];
    ["Offset of field: capture_backend_ops_t::get_description"]
        [::std::mem::offset_of!(capture_backend_ops_t, get_description) - 112usize];
    ["Offset of field: capture_backend_ops_t::is_feature_supported"]
        [::std::mem::offset_of!(capture_backend_ops_t, is_feature_supported) - 120usize];
    ["Offset of field: capture_backend_ops_t::set_option"]
        [::std::mem::offset_of!(capture_backend_ops_t, set_option) - 128usize];
    ["Offset of field: capture_backend_ops_t::get_option"]
        [::std::mem::offset_of!(capture_backend_ops_t, get_option) - 136usize];
};
#[doc = " 后端结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_backend_t {
    pub private_data: *mut ::std::os::raw::c_void,
    pub ops: *mut capture_backend_ops_t,
    pub type_: capture_backend_type_t,
    pub error_cb: error_callback_t,
    pub error_user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of capture_backend_t"][::std::mem::size_of::<capture_backend_t>() - 40usize];
    ["Alignment of capture_backend_t"][::std::mem::align_of::<capture_backend_t>() - 8usize];
    ["Offset of field: capture_backend_t::private_data"]
        [::std::mem::offset_of!(capture_backend_t, private_data) - 0usize];
    ["Offset of field: capture_backend_t::ops"]
        [::std::mem::offset_of!(capture_backend_t, ops) - 8usize];
    ["Offset of field: capture_backend_t::type_"]
        [::std::mem::offset_of!(capture_backend_t, type_) - 16usize];
    ["Offset of field: capture_backend_t::error_cb"]
        [::std::mem::offset_of!(capture_backend_t, error_cb) - 24usize];
    ["Offset of field: capture_backend_t::error_user_data"]
        [::std::mem::offset_of!(capture_backend_t, error_user_data) - 32usize];
};
unsafe extern "C" {
    #[doc = " 注册后端\n @param backend 后端结构\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_backend_register(backend: *mut capture_backend_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 注销后端\n @param type 后端类型\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_backend_unregister(type_: capture_backend_type_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 获取后端\n @param type 后端类型\n @return 成功返回后端结构，失败返回 NULL"]
    pub fn capture_backend_get(type_: capture_backend_type_t) -> *mut capture_backend_t;
}
unsafe extern "C" {
    #[doc = " 获取所有已注册的后端\n @param backends 后端列表\n @param count 后端数量\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_backend_get_all(
        backends: *mut *mut capture_backend_t,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " 释放后端列表\n @param backends 后端列表\n @param count 后端数量"]
    pub fn capture_backend_free_all(backends: *mut capture_backend_t, count: ::std::os::raw::c_int);
}
