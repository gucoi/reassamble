/* automatically generated by rust-bindgen 0.69.5 */

pub const CAPTURE_DEVICE_FLAG_UP: u32 = 1;
pub const CAPTURE_DEVICE_FLAG_RUNNING: u32 = 2;
pub const CAPTURE_DEVICE_FLAG_PROMISC: u32 = 4;
pub const CAPTURE_DEVICE_FLAG_LOOPBACK: u32 = 8;
pub const CAPTURE_DEVICE_FLAG_WIRELESS: u32 = 16;
pub const CAPTURE_DEVICE_FLAG_VIRTUAL: u32 = 32;
pub const CAPTURE_DEVICE_FLAG_HAS_IPV4: u32 = 64;
pub const CAPTURE_DEVICE_FLAG_HAS_IPV6: u32 = 128;
pub type __time_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[doc = " 数据包结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct packet_t {
    pub data: *const u8,
    pub len: u32,
    pub caplen: u32,
    pub ts: timespec,
    pub if_index: u32,
    pub flags: u32,
    pub protocol: u32,
    pub vlan_tci: u32,
    pub hash: u32,
}
#[test]
fn bindgen_test_layout_packet_t() {
    const UNINIT: ::std::mem::MaybeUninit<packet_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<packet_t>(),
        56usize,
        concat!("Size of: ", stringify!(packet_t))
    );
    assert_eq!(
        ::std::mem::align_of::<packet_t>(),
        8usize,
        concat!("Alignment of ", stringify!(packet_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).caplen) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_t),
            "::",
            stringify!(caplen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_t),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).if_index) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_t),
            "::",
            stringify!(if_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_t),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vlan_tci) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_t),
            "::",
            stringify!(vlan_tci)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(packet_t),
            "::",
            stringify!(hash)
        )
    );
}
#[doc = " 设备信息结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_device_t {
    pub name: [::std::os::raw::c_char; 32usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub flags: u32,
    pub type_: u32,
    pub mtu: u32,
    pub speed: u32,
    pub mac: [u8; 6usize],
    pub ipv4: u32,
    pub netmask: u32,
    pub broadcast: u32,
}
#[test]
fn bindgen_test_layout_capture_device_t() {
    const UNINIT: ::std::mem::MaybeUninit<capture_device_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<capture_device_t>(),
        324usize,
        concat!("Size of: ", stringify!(capture_device_t))
    );
    assert_eq!(
        ::std::mem::align_of::<capture_device_t>(),
        4usize,
        concat!("Alignment of ", stringify!(capture_device_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv4) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(ipv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).netmask) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(netmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).broadcast) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_device_t),
            "::",
            stringify!(broadcast)
        )
    );
}
#[doc = " 统计信息结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_stats_t {
    pub packets_received: u64,
    pub packets_dropped: u64,
    pub packets_if_dropped: u64,
    pub bytes_received: u64,
    pub start_time: timespec,
    pub end_time: timespec,
}
#[test]
fn bindgen_test_layout_capture_stats_t() {
    const UNINIT: ::std::mem::MaybeUninit<capture_stats_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<capture_stats_t>(),
        64usize,
        concat!("Size of: ", stringify!(capture_stats_t))
    );
    assert_eq!(
        ::std::mem::align_of::<capture_stats_t>(),
        8usize,
        concat!("Alignment of ", stringify!(capture_stats_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packets_received) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_stats_t),
            "::",
            stringify!(packets_received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packets_dropped) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_stats_t),
            "::",
            stringify!(packets_dropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packets_if_dropped) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_stats_t),
            "::",
            stringify!(packets_if_dropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_received) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_stats_t),
            "::",
            stringify!(bytes_received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_stats_t),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_stats_t),
            "::",
            stringify!(end_time)
        )
    );
}
pub const capture_error_t_CAPTURE_SUCCESS: capture_error_t = 0;
pub const capture_error_t_CAPTURE_ERROR_INVALID_PARAM: capture_error_t = 1;
pub const capture_error_t_CAPTURE_ERROR_INIT_FAILED: capture_error_t = 2;
pub const capture_error_t_CAPTURE_ERROR_OPEN_FAILED: capture_error_t = 3;
pub const capture_error_t_CAPTURE_ERROR_SET_FILTER: capture_error_t = 4;
pub const capture_error_t_CAPTURE_ERROR_START_FAILED: capture_error_t = 5;
pub const capture_error_t_CAPTURE_ERROR_STOP_FAILED: capture_error_t = 6;
pub const capture_error_t_CAPTURE_ERROR_PAUSE_FAILED: capture_error_t = 7;
pub const capture_error_t_CAPTURE_ERROR_RESUME_FAILED: capture_error_t = 8;
pub const capture_error_t_CAPTURE_ERROR_GET_STATS: capture_error_t = 9;
pub const capture_error_t_CAPTURE_ERROR_GET_DEVICES: capture_error_t = 10;
pub const capture_error_t_CAPTURE_ERROR_NOT_SUPPORTED: capture_error_t = 11;
pub const capture_error_t_CAPTURE_ERROR_BACKEND: capture_error_t = 12;
pub const capture_error_t_CAPTURE_ERROR_MEMORY: capture_error_t = 13;
pub const capture_error_t_CAPTURE_ERROR_TIMEOUT: capture_error_t = 14;
pub const capture_error_t_CAPTURE_ERROR_INTERNAL: capture_error_t = 15;
#[doc = " 错误码定义"]
pub type capture_error_t = ::std::os::raw::c_uint;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_ETHERNET: capture_device_type_t = 1;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_WIFI: capture_device_type_t = 2;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_LOOPBACK: capture_device_type_t = 3;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_TUN: capture_device_type_t = 4;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_TAP: capture_device_type_t = 5;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_BRIDGE: capture_device_type_t = 6;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_VLAN: capture_device_type_t = 7;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_BOND: capture_device_type_t = 8;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_VETH: capture_device_type_t = 9;
pub const capture_device_type_t_CAPTURE_DEVICE_TYPE_OTHER: capture_device_type_t = 10;
#[doc = " 设备类型定义"]
pub type capture_device_type_t = ::std::os::raw::c_uint;
pub const capture_backend_type_t_CAPTURE_BACKEND_PCAP: capture_backend_type_t = 0;
pub const capture_backend_type_t_CAPTURE_BACKEND_PFRING: capture_backend_type_t = 1;
pub const capture_backend_type_t_CAPTURE_BACKEND_DPDK: capture_backend_type_t = 2;
pub const capture_backend_type_t_CAPTURE_BACKEND_EBPF: capture_backend_type_t = 3;
#[doc = " 抓包后端类型"]
pub type capture_backend_type_t = ::std::os::raw::c_uint;
#[doc = " 抓包配置结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_config_t {
    pub device: *const ::std::os::raw::c_char,
    pub filter: *const ::std::os::raw::c_char,
    pub snaplen: ::std::os::raw::c_int,
    pub timeout_ms: ::std::os::raw::c_int,
    pub promiscuous: bool,
    pub immediate: bool,
    pub buffer_size: u32,
    pub type_: capture_backend_type_t,
    pub backend_config: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_capture_config_t() {
    const UNINIT: ::std::mem::MaybeUninit<capture_config_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<capture_config_t>(),
        48usize,
        concat!("Size of: ", stringify!(capture_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<capture_config_t>(),
        8usize,
        concat!("Alignment of ", stringify!(capture_config_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_config_t),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_config_t),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).snaplen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_config_t),
            "::",
            stringify!(snaplen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout_ms) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_config_t),
            "::",
            stringify!(timeout_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).promiscuous) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_config_t),
            "::",
            stringify!(promiscuous)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).immediate) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_config_t),
            "::",
            stringify!(immediate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_config_t),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_config_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend_config) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_config_t),
            "::",
            stringify!(backend_config)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_handle {
    _unused: [u8; 0],
}
#[doc = " 抓包句柄"]
pub type capture_handle_t = capture_handle;
#[doc = " 数据包回调函数类型\n @param packet 数据包\n @param user_data 用户数据\n @return 返回 true 继续抓包，false 停止抓包"]
pub type packet_callback_t = ::std::option::Option<
    unsafe extern "C" fn(packet: *const packet_t, user_data: *mut ::std::os::raw::c_void) -> bool,
>;
#[doc = " 错误回调函数类型\n @param error 错误信息\n @param user_data 用户数据"]
pub type error_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        error: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[doc = " 初始化抓包系统\n @param config 配置信息\n @param error_cb 错误回调函数\n @param error_user_data 错误回调用户数据\n @return 成功返回抓包句柄，失败返回 NULL"]
    pub fn capture_init(
        config: *const capture_config_t,
        error_cb: error_callback_t,
        error_user_data: *mut ::std::os::raw::c_void,
    ) -> *mut capture_handle_t;
}
extern "C" {
    #[doc = " 开始抓包\n @param handle 抓包句柄\n @param packet_cb 数据包回调函数\n @param user_data 用户数据\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_start(
        handle: *mut capture_handle_t,
        packet_cb: packet_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 停止抓包\n @param handle 抓包句柄\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_stop(handle: *mut capture_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 暂停抓包\n @param handle 抓包句柄\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_pause(handle: *mut capture_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 恢复抓包\n @param handle 抓包句柄\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_resume(handle: *mut capture_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 获取统计信息\n @param handle 抓包句柄\n @param stats 统计信息结构\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_get_stats(
        handle: *mut capture_handle_t,
        stats: *mut capture_stats_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 设置过滤器\n @param handle 抓包句柄\n @param filter BPF 过滤器\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_set_filter(
        handle: *mut capture_handle_t,
        filter: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 获取支持的设备列表\n @param devices 设备列表\n @param count 设备数量\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_get_devices(
        devices: *mut *mut capture_device_t,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 释放设备列表\n @param devices 设备列表\n @param count 设备数量"]
    pub fn capture_free_devices(devices: *mut capture_device_t, count: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " 清理抓包句柄\n @param handle 抓包句柄"]
    pub fn capture_cleanup(handle: *mut capture_handle_t);
}
#[doc = " 后端操作函数表"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_backend_ops_t {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            config: *const capture_config_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void)>,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            device: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            callback: packet_callback_t,
            user_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub pause: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub resume: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub set_filter: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            filter: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_stats: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            stats: *mut capture_stats_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_devices: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            devices: *mut *mut capture_device_t,
            count: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub free_devices: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            devices: *mut capture_device_t,
            count: ::std::os::raw::c_int,
        ),
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
    >,
    pub get_version: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
    >,
    pub get_description: ::std::option::Option<
        unsafe extern "C" fn(backend: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char,
    >,
    pub is_feature_supported: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            feature: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub set_option: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            option: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_option: ::std::option::Option<
        unsafe extern "C" fn(
            backend: *mut ::std::os::raw::c_void,
            option: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_capture_backend_ops_t() {
    const UNINIT: ::std::mem::MaybeUninit<capture_backend_ops_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<capture_backend_ops_t>(),
        144usize,
        concat!("Size of: ", stringify!(capture_backend_ops_t))
    );
    assert_eq!(
        ::std::mem::align_of::<capture_backend_ops_t>(),
        8usize,
        concat!("Alignment of ", stringify!(capture_backend_ops_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pause) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(pause)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resume) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(resume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_filter) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(set_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_stats) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(get_stats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_devices) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(get_devices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_devices) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(free_devices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_version) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(get_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_description) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(get_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_feature_supported) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(is_feature_supported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_option) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(set_option)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_option) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_ops_t),
            "::",
            stringify!(get_option)
        )
    );
}
#[doc = " 后端结构"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_backend_t {
    pub private_data: *mut ::std::os::raw::c_void,
    pub ops: *mut capture_backend_ops_t,
    pub type_: capture_backend_type_t,
    pub error_cb: error_callback_t,
    pub error_user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_capture_backend_t() {
    const UNINIT: ::std::mem::MaybeUninit<capture_backend_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<capture_backend_t>(),
        40usize,
        concat!("Size of: ", stringify!(capture_backend_t))
    );
    assert_eq!(
        ::std::mem::align_of::<capture_backend_t>(),
        8usize,
        concat!("Alignment of ", stringify!(capture_backend_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_t),
            "::",
            stringify!(private_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ops) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_t),
            "::",
            stringify!(ops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_cb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_t),
            "::",
            stringify!(error_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_user_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(capture_backend_t),
            "::",
            stringify!(error_user_data)
        )
    );
}
extern "C" {
    #[doc = " 注册后端\n @param backend 后端结构\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_backend_register(backend: *mut capture_backend_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 注销后端\n @param type 后端类型\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_backend_unregister(type_: capture_backend_type_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 获取后端\n @param type 后端类型\n @return 成功返回后端结构，失败返回 NULL"]
    pub fn capture_backend_get(type_: capture_backend_type_t) -> *mut capture_backend_t;
}
extern "C" {
    #[doc = " 获取所有已注册的后端\n @param backends 后端列表\n @param count 后端数量\n @return 成功返回 0，失败返回错误码"]
    pub fn capture_backend_get_all(
        backends: *mut *mut capture_backend_t,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " 释放后端列表\n @param backends 后端列表\n @param count 后端数量"]
    pub fn capture_backend_free_all(backends: *mut capture_backend_t, count: ::std::os::raw::c_int);
}
